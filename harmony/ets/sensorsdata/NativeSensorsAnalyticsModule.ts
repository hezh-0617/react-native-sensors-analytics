/**
 * This code was generated by "react-native codegen-harmony"
 *
 * Do not edit this file as changes may cause incorrect behavior and will be
 * lost once the code is regenerated.
 *
 * @generatorVersion: 1
 */

export namespace NativeSensorsAnalyticsModule {
  export const NAME = 'NativeSensorsAnalyticsModule' as const

  type SAPropertiesType = string | boolean | number | Array<string> | Date | Function;

  export type SAPropertiesObjectType = { [key: string]: SAPropertiesType }

  export type SAConfigOptions = {
    server_url: string, //数据接收地址，默认 ""
    show_log: boolean, //是否显示日志,默认 false
    harmony: { // HarmonyOS 端特有配置
      max_cache_size?: number //最大缓存条数，默认 10000
    },
    global_properties?: SAPropertiesObjectType, // 全局属性
    // auto_track: SAAutoTrackType,// 全埋点开关，默认不开启
    javascript_bridge: boolean, //H5 打通开关，默认 false
    flush_interval: number, //数据上报间隔，默认 15*1000 毫秒
    flush_bulksize: number, //数据缓存上报最大条数，默认 100 条
  }

  enum SAAutoTrackType {
    START = 1,
    END = 2,
    CLICK = 4,
    VIEW_SCREEN = 8,
  }

  export interface Spec {
    login(loginId: string): void;

    logout(): void;

    profileSet(profile: SAPropertiesObjectType): void;

    profileSetOnce(profile: SAPropertiesObjectType): void;

    track(event: string, properties: SAPropertiesObjectType): void;

    trackTimerStart(event: string): void;

    trackTimerEnd(event: string, properties: SAPropertiesObjectType): void;

    clearTrackTimer(): void;

    trackViewScreen(url: string, properties: SAPropertiesObjectType): void;

    profileIncrement(property: string, value: number): void;

    profileAppend(property: string, strList: string[]): void;

    profileUnset(property: string): void;

    profileDelete(): void;

    getDistinctIdPromise(): Promise<string>;

    getAnonymousIdPromise(): Promise<string>;

    registerSuperProperties(properties: SAPropertiesObjectType): void;

    unregisterSuperProperty(property: string): void;

    clearSuperProperties(): void;

    flush(): void;

    deleteAll(): void;

    identify(anonymousId: string): void;

    trackTimerPause(eventName: string): void;

    trackTimerResume(eventName: string): void;

    resetAnonymousId(): void;

    itemSet(itemType: string, itemId: string, properties: SAPropertiesObjectType): void;

    itemDelete(itemType: string, itemId: string): void;

    getPresetPropertiesPromise(): Promise<SAPropertiesObjectType>;

    getLoginIdPromise(): Promise<string>;

    trackAppInstall(properties: Object): void;

    setDynamicSuperProperties(properties: SAPropertiesObjectType): void;

    bind(key: string, value: string): void;

    unbind(key: string, value: string): void;

    init(config: SAConfigOptions): void;

    currentPlatform(): string;
  }
}

// export * from "./NativeSensorsAnalyticsModule"
export * as SA from "./NativeSensorsAnalyticsModule"
